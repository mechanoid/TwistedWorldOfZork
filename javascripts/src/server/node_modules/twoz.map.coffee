map_storage = require('twoz.map_storage')

class Map
  find_or_load_tile: (ids..., result, callback) ->
    # building an ids working duplicate
    ids = ids[..]
    console.log ids.length
    id = ids.shift()
#    console.log("find tile for id #{id}")

    if @tiles()[id]?
      # maybe we know the tile already, so just return it and run the cb if complete
      result.tiles[id] = @tiles()[id]
      callback(result.tiles) if @all_tiles_found(result)
    else
      # search in redis and run callback if list is full
      map_storage.lookup id, callback, (tile, callback) =>
        result.tiles[id] = @tiles()[id] = tile
#        console.log arguments
        callback(result.tiles) if @all_tiles_found(result)

    # propagate rest of list
    @find_or_load_tile(ids..., result, callback) if ids.length > 0

  all_tiles_found: (result) ->
    Object.keys(result.tiles).length is result.count


  tiles: ->
    @tiles ?= {}

  find_tiles: (ids..., callback) ->
    result = {
      count: ids.length
      tiles: {}
    }
    @find_or_load_tile(ids..., result, callback)

module.exports = new Map()